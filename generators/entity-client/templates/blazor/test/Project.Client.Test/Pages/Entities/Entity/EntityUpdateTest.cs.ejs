<%#
 Copyright 2013-2020 the original author or authors from the JHipster project.
 This file is part of the JHipster project, see https://www.jhipster.tech/
 for more information.
 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at
      http://www.apache.org/licenses/LICENSE-2.0
 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
-%>
<%_ 
const hasManyToMany = entityClassHasManyToMany;
const entityTableName = snakeCasedEntityClass;
const entityClassName = pascalizedEntityClass;
const entityVariableName = camelCasedEntityClass;
const entityClassNamePluralized = pascalizedEntityClassPlural;
_%>
using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;
using AutoFixture;
using Blazored.Modal;
using Blazored.Modal.Services;
using Blazorise;
using Blazorise.Bootstrap;
using Blazorise.Icons.FontAwesome;
using Bunit;
using Bunit.Rendering;
using FluentAssertions;
using <%= namespace %>.Client.Models;
using <%= namespace %>.Client.Pages.Utils;
using <%= namespace %>.Client.Services.EntityServices.<%= entityClassName %>;
using <%= namespace %>.Client.Shared;
using Microsoft.AspNetCore.Components;
using Microsoft.Extensions.DependencyInjection;
using Moq;
using Toolbelt.Blazor.Extensions.DependencyInjection;
using Xunit;

namespace <%= namespace %>.Client.Test.Pages.Entities.<%= entityClassName %>
{
    public class <%= entityClassName %>UpdateTest : TestContext
    {
        private readonly Mock<I<%= entityClassName %>Service> _<%= entityVariableName %>Service;
        private readonly Mock<IModalService> _modalService;
        private readonly Mock<INavigationService> _navigationService;
        private readonly AutoFixture.Fixture _fixture = new AutoFixture.Fixture();

        public <%= entityClassName %>UpdateTest()
        {
            _<%= entityVariableName %>Service = new Mock<I<%= entityClassName %>Service>();
            _modalService = new Mock<IModalService>();
            _navigationService = new Mock<INavigationService>();
            Services.AddSingleton<INavigationService>(_navigationService.Object);
            Services.AddSingleton<I<%= entityClassName %>Service>(_<%= entityVariableName %>Service.Object);
            Services.AddSingleton<IModalService>(_modalService.Object);
            Services.AddBlazorise(options =>
                {
                    options.ChangeTextOnKeyPress = true;
                })
                .AddBootstrapProviders()
                .AddFontAwesomeIcons();
            Services.AddHttpClientInterceptor();
        }


        [Fact]
        public void Should_UpdateSelected<%= entityClassName %>_When_FormIsSubmitWithId()
        {
            //Arrange
            var <%= entityVariableName %>ToUpdate = _fixture.Create<<%= asModel(entityClassName) %>>();
            <%= entityVariableName %>ToUpdate.Id = 1; 

            _<%= entityVariableName %>Service.Setup(service => service.Get(It.IsAny<string>())).Returns(Task.FromResult(<%= entityVariableName %>ToUpdate));
            
            var update<%= entityClassName %>Page = RenderComponent<<%= namespace %>.Client.Pages.Entities.<%= entityClassName %>.<%= entityClassName %>Update>(ComponentParameter.CreateParameter("Id", 1));


            // Act
            var <%= entityVariableName %>form = update<%= entityClassName %>Page.Find("form");
            <%= entityVariableName %>form.Submit();

            // Assert
            _<%= entityVariableName %>Service.Verify(service => service.Update(<%= entityVariableName %>ToUpdate),Times.Once);
        }

        [Fact]
        public void Should_Add<%= entityClassName %>_When_FormIsSubmitWithoutId()
        {
            //Arrange 
            var update<%= entityClassName %>Page = RenderComponent<<%= namespace %>.Client.Pages.Entities.<%= entityClassName %>.<%= entityClassName %>Update>(ComponentParameter.CreateParameter("Id", 0));

            // Act
            var <%= entityVariableName %>form = update<%= entityClassName %>Page.Find("form");
            <%= entityVariableName %>form.Submit();

            // Assert
            _<%= entityVariableName %>Service.Verify(service => service.Add(It.IsAny<<%= asModel(entityClassName) %>>()), Times.Once);
        }

    }
}
